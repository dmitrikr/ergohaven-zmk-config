#include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        enc_vol: enc_vol {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENC_VOL";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
        };

        lg_space: lg_space {
            compatible = "zmk,behavior-mod-morph";
            label = "LG_SPACE";
            bindings = <&kp SPACE>, <&lg_tog>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        cmben {
            bindings = <&layer_en>;
            key-positions = <15 16>;
            layers = <1>;
        };

        cmbru {
            bindings = <&layer_ru>;
            key-positions = <15 16>;
            layers = <0>;
        };
    };

    macros {
        to_ru: to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE)>;
            label = "TO_RU";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        to_en: to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE)>;
            label = "TO_EN";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        layer_en: layer_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &to_en>;
            label = "LAYER_EN";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        layer_ru: layer_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &to_ru>;
            label = "LAYER_RU";
            tap-ms = <30>;
            wait-ms = <0>;
        };

        en: en {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&to_en>,
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&to_ru>;

            label = "EN";
            wait-ms = <20>;
            tap-ms = <30>;
        };

        lg_tog: lg_tog {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &tog 1>;
            label = "LG_TOG";
        };

        enmod: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 2>,
                <&macro_tap>,
                <&kp LG(SPACE)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2>,
                <&macro_tap>,
                <&kp LG(SPACE)>;

            label = "NEW_MACRO";
        };

        four_spaces: four_spaces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
            label = "FOUR_SPACES";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            bindings = <
&kp ESC         &kp N1  &kp N2    &kp N3    &kp N4     &kp N5                          &kp N6  &kp N7     &kp N8     &kp N9    &kp N0    &kp BSPC
&kp GRAVE       &kp Q   &kp W     &kp E     &kp R      &kp T                           &kp Y   &kp U      &kp I      &kp O     &kp P     &kp BSLH
&kp LEFT_SHIFT  &kp A   &kp S     &kp D     &kp F      &kp G                           &kp H   &kp J      &kp K      &kp L     &kp SEMI  &kp SQT
&kp TAB         &kp Z   &kp X     &kp C     &kp V      &kp B   &kp LBKT     &kp RBKT   &kp N   &kp M      &kp COMMA  &kp DOT   &kp FSLH  &kp RSHFT
                        &kp LGUI  &kp LALT  &kp LCTRL  &mo 2   &lg_space    &kp ENTER  &mo 6   &kp RCTRL  &kp RALT   &kp RGUI
            >;

            display-name = "Base";
            sensor-bindings =
                <&enc_vol>,
                <&enc_vol>,
                <&enc_vol>,
                <&enc_vol>,
                <&enc_vol>,
                <&enc_vol>;
        };

        ru {
            display-name = "Ru";
            bindings = <
&kp ESC         &kp N1                   &kp N2                &kp N3              &kp N4              &kp N5                                                               &kp N6              &kp N7                     &kp N8               &kp N9                 &kp N0               &kp BSPC
&kp GRAVE       &kp RU_CYRILLIC_SHORT_I  &kp RU_CYRILLIC_TSE   &kp RU_CYRILLIC_U   &kp RU_CYRILLIC_KA  &kp RU_CYRILLIC_IE                                                   &kp RU_CYRILLIC_EN  &kp RU_CYRILLIC_GHE        &kp RU_CYRILLIC_SHA  &kp RU_CYRILLIC_SHCHA  &kp RU_CYRILLIC_ZE   &kp BSLH
&kp LEFT_SHIFT  &kp RU_CYRILLIC_EF       &kp RU_CYRILLIC_YERU  &kp RU_CYRILLIC_VE  &kp RU_CYRILLIC_A   &kp RU_CYRILLIC_PE                                                   &kp RU_CYRILLIC_ER  &kp RU_CYRILLIC_O          &kp RU_CYRILLIC_EL   &kp RU_CYRILLIC_DE     &kp RU_CYRILLIC_ZHE  &kp RU_CYRILLIC_E
&kp TAB         &kp RU_CYRILLIC_YA       &kp RU_CYRILLIC_CHE   &kp RU_CYRILLIC_ES  &kp RU_CYRILLIC_EM  &kp RU_CYRILLIC_I   &kp RU_CYRILLIC_HA    &kp RU_CYRILLIC_HARD_SIGN  &kp RU_CYRILLIC_TE  &kp RU_CYRILLIC_SOFT_SIGN  &kp RU_CYRILLIC_BE   &kp RU_CYRILLIC_YU     &kp RU_DOT           &kp RSHFT
                                         &kp LGUI              &kp LALT            &kp LCTRL           &enmod              &lg_space             &kp ENTER                  &mo 6               &kp RCTRL                  &kp RALT             &kp RGUI
            >;

            sensor-bindings =
                <&enc_vol>,
                <&enc_vol>,
                <&enc_vol>,
                <&enc_vol>,
                <&enc_vol>,
                <&enc_vol>;
        };

        nav {
            bindings = <
&kp LT            &kp GT           &kp AT        &kp HASH      &kp DOLLAR       &kp PERCENT                                    &kp CARET  &kp AMPS  &kp TILDE     &kp QUESTION  &kp PIPE         &kp DELETE
&kp LEFT_BRACKET  &kp RBKT         &kp HOME      &kp END       &kp COLON        &kp SEMI                                       &kp EXCL   &kp N1    &kp NUMBER_2  &kp N3        &kp KP_PLUS      &kp KP_MINUS
&kp LPAR          &kp RPAR         &kp LA(LEFT)  &kp UP        &kp LA(RIGHT)    &kp PG_UP                                      &kp GRAVE  &kp N4    &kp N5        &kp N6        &kp KP_ASTERISK  &kp KP_DIVIDE
&kp LEFT_BRACE    &kp RIGHT_BRACE  &kp LEFT      &kp DOWN      &kp RIGHT        &kp PAGE_DOWN  &kp DOT      &kp COMMA          &kp SQT    &kp N7    &kp N8        &kp N9        &kp KP_EQUAL     &kp BACKSLASH
                                   &kp TAB       &four_spaces  &kp PRINTSCREEN  &trans         &kp UNDER    &kp DOUBLE_QUOTES  &trans     &mo 5     &kp N0        &kp LSHFT
            >;

            display-name = "Navigation";
        };

        sym_en {
            bindings = <
&trans  &trans     &kp AT    &kp DLLR   &kp HASH  &trans                                  &trans     &trans    &kp CARET  &trans    &trans    &trans
&trans  &trans     &kp LT    &kp EQUAL  &kp GT    &kp GRAVE                               &trans     &kp LBKT  &kp UNDER  &kp RBKT  &trans    &trans
&trans  &kp BSLH   &kp LPAR  &kp MINUS  &kp RPAR  &kp PLUS                                &kp PRCNT  &kp LBRC  &kp SEMI   &kp RBRC  &kp EXCL  &kp QUESTION
&trans  &kp COMMA  &kp STAR  &kp COLON  &kp FSLH  &trans     &trans    &kp DOUBLE_QUOTES  &trans     &kp PIPE  &kp TILDE  &kp AMPS  &kp DOT   &trans
                   &trans    &trans     &trans    &mo 5      &trans    &trans             &trans     &trans    &trans     &trans
            >;

            display-name = "Symbols";
        };

        sym_ru {
            display-name = "Symbols";
            bindings = <
&trans  &trans        &en AT        &en DLLR      &en HASH     &trans                                         &trans          &trans    &en CARET    &trans    &trans      &trans
&trans  &trans        &en LT        &kp EQUAL     &en GT       &en GRAVE                                      &trans          &en LBKT  &kp UNDER    &en RBKT  &trans      &trans
&trans  &kp RU_BSLH   &kp LPAR      &kp MINUS     &kp RPAR     &kp PLUS                                       &kp RU_PERCENT  &en LBRC  &kp RU_SEMI  &kp RBRC  &kp EXCL    &kp RU_QUESTION
&trans  &kp RU_COMMA  &kp RU_ASTRK  &kp RU_COLON  &kp RU_FSLH  &kp RU_NUMERO  &trans    &kp RU_DOUBLE_QUOTES  &trans          &en PIPE  &en TILDE    &en AMPS  &kp RU_DOT  &trans
                      &trans        &trans        &trans       &mo 5          &trans    &trans                &trans          &trans    &trans       &trans
            >;
        };

        adj {
            bindings = <
&bootloader  &trans  &trans  &trans  &trans  &trans                    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR_ALL
&trans       &trans  &trans  &trans  &trans  &trans                    &trans        &trans        &trans            &trans        &trans        &studio_unlock
&trans       &trans  &trans  &trans  &trans  &trans                    &out OUT_BLE  &kp C_VOL_DN  &kp K_MUTE        &kp C_VOL_UP  &trans        &trans
&trans       &trans  &trans  &trans  &trans  &trans  &trans    &trans  &out OUT_USB  &kp K_PREV    &kp K_PLAY_PAUSE  &kp K_NEXT    &trans        &trans
                     &trans  &trans  &trans  &trans  &trans    &trans  &trans        &trans        &trans            &trans
            >;

            display-name = "Adjust";
        };

        layer_6 {
            bindings = <
&kp F1    &kp F2   &kp F3              &kp F4              &kp F5         &kp F6                    &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&to 0     &to 1    &to 2               &to 3               &to 4          &trans                    &trans  &trans  &trans  &trans   &trans   &trans
&kp CAPS  &kp INS  &kp PAUSE_BREAK     &kp LS(UP)          &trans         &trans                    &to_ru  &trans  &trans  &trans   &trans   &trans
&trans    &trans   &kp LS(LEFT_ARROW)  &kp LS(DOWN_ARROW)  &kp LS(RIGHT)  &trans  &trans    &to 0   &to 1   &to 2   &trans  &trans   &trans   &trans
                   &trans              &trans              &trans         &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
